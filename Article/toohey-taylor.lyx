#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass RJournal
\use_default_options true
\begin_modules
knitr
\end_modules
\maintain_unincluded_children false
\language english
\language_package none
\inputencoding default
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_authoryear
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

<<setup, include=FALSE>>=
\end_layout

\begin_layout Plain Layout

render_sweave() # use Schunk, Sinput and Soutput environments defined by
 RJournal
\end_layout

\begin_layout Plain Layout

set_header(highlight = '') # no need for 
\backslash
usepackage{Sweave}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Title
Inside GitHub: Visualizing the Growth of the R Community
\end_layout

\begin_layout Author
by Patrick Toohey and Roger S.
 Taylor
\end_layout

\begin_layout Abstract
Since its inception in 2008, GitHub has come to house over 1000 R-language
 repositories, including collections of online tutorials and courses, source
 code supplements to accompany books about R, and nearly 300 CRAN packages.
 In this article we visualize GitHub's growing R community using data collected
 through the GitHub API: an open web programming interface to GitHub's repositor
ies and metadata.
 These visualizations illustrate the history of R development on GitHub
 and identify key projects and use cases that have substantially impacted
 the community.
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Standard
In team environments, version control systems aid collaboration by (a) coordinat
ing changes from multiple sources and (b) providing improved visibility
 between team members.
 The open-source community revolutionized the concept of a development team
 to include not just core members, but also outsiders wishing to either
 view or contribute to an ongoing project.
 In this modern distributed model, developers outside a project's core team
 can contribute to the project in a more fluid manner.
 While the core development team maintains control of the code repository,
 outside developers are free to
\emph on
 watch 
\emph default
ongoing activity, which can include pre-release fixes, feature enhancements,
 or other experimental development.
 
\end_layout

\begin_layout Standard
As an alternative to simply watching, outsiders are also free to create
 independent 
\emph on
forks
\emph default
 of the core repository, to which they can make their own changes without
 oversight from the original team.
 Should the outside developer complete a new unit of development work, they
 may wish to offer their changes back to the core team for integration within
 the original repository.
 The strength of the outside developer's contributions may eventually lead
 to their inclusion in the core development team.
 
\end_layout

\begin_layout Standard
In these development scenarios, the underlying source code tool (e.g., Git)
 simplifies the interaction between the developers in their distributed
 context - which effectively consist of collections of developers, watchers,
 and repository forks.
 Researchers have suggested that the overall value of a project is demonstrated
 by the quantity of forks and active watchers, as these are the key metrics
 outside developers consider when evaluating a project 
\begin_inset CommandInset citation
LatexCommand citep*
key "Choi:2013:HOS:2441955.2441989,Dabbish:2012:SCG:2145204.2145396,McDonald:2013:PPO:2468356.2468382"

\end_inset

.
 Centralized environments like GitHub promote the underlying collaborative
 aspects of software development by advertising these metrics.
\end_layout

\begin_layout Standard
Our investigation focused on the visualization of these collaboration metrics
 within the R community, more specifically, the metrics for projects hosted
 on GitHub.
 Through these visualizations, we can see the growth of R within GitHub,
 as well as the most influential projects therein.
 Moreover, the analysis highlights new source code control paradigms that
 the distributed development model affords.
\end_layout

\begin_layout Subsection
GitHub API
\end_layout

\begin_layout Standard
The GitHub API (
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://developer.github.com/v3/
\end_layout

\end_inset

) provides a collection of interfaces that allow individuals to query and
 explore the attributes of source code repositories.
 Each interface within the API is bound to a different context of GitHub
 data: (e.g., Users, Activity, Organizations, etc.).
 Included in these interfaces is a generic search function, which permits
 queries that identify all repositories associated with a specific language.
 We have used this interface to target the GitHub repositories containing
 R source code
\begin_inset Foot
status open

\begin_layout Plain Layout
The search query for R repositories returns a maximum of 1000 rows and has
 been found to include projects from other languages that use the .r file
 extension.
 Accordingly, it is difficult to precisely quantifying the number of R projects
 on GitHub.
\end_layout

\end_inset

.
 GitHub's top R repositories - sorted by 
\emph on
Watcher
\emph default
 count and 
\emph on
Fork
\emph default
 count - are shown respectively in the Tables 1 and 2
\begin_inset Foot
status open

\begin_layout Plain Layout
Unless otherwise noted, all data presented in this article were collected
 on 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format(Sys.time(), "%Y-%m-%d")}
\end_layout

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
These tables demonstrate the diversity of the projects hosted on GitHub,
 where commonly utilized R packages like 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{ggplot2}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{shiny}
\end_layout

\end_inset

 are coupled with repositories like 
\emph on
ProgrammingAssignment2
\emph default
, which includes the source code for an online course that teaches the R-languag
e.
 In these examples, the associated watcher and fork metrics illustrate the
 distinct use cases of the respective projects.
 In the case of
\emph on
 ProgrammingAssignment2
\emph default
, participants in the course will likely wish to create a new fork of the
 repository so they may independently complete the associated course assignments.
 Similar examples include 
\emph on
swirl_courses
\emph default
 and the project 
\emph on
ML_for_Hackers
\emph default
, which maintains the source code associated with Conway and White's 'Machine
 Learning for Hackers'
\begin_inset CommandInset citation
LatexCommand nocite
key "ML_for_Hackers"

\end_inset

.
 Each of these projects has a relatively high fork count, suggesting that
 developers clone the code-base with the intent of making their own modification
s.
\end_layout

\begin_layout Standard
The use cases associated with the listed R packages are likely different,
 with watchers primarily interested in external updates to the package source
 code, whereas those creating repository forks demonstrate some intent to
 modify the associated code in some way.
 The projects in each of the above scenarios demonstrate the utility of
 the underlying distributed source control model.
 When viewing visualizations associated with GitHub repositories it is helpful
 to keep these use cases in mind.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<github-api-generic, warning=FALSE, message=FALSE, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(rjson)
\end_layout

\begin_layout Plain Layout

library(RCurl)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Add proxy server address here if nececssary
\end_layout

\begin_layout Plain Layout

proxy.server=""
\end_layout

\begin_layout Plain Layout

opts <- c(useragent="RCurl", proxy=proxy.server)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Basic query stack targeting JSON data
\end_layout

\begin_layout Plain Layout

github.api <- function(query, acceptHeaders=""){
\end_layout

\begin_layout Plain Layout

  custom.header <- c(Accept=acceptHeaders)
\end_layout

\begin_layout Plain Layout

  json <- getURL(query, httpheader=custom.header, ssl.verifyPeer=FALSE, .opts=opts)
\end_layout

\begin_layout Plain Layout

  fromJSON(json)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<github-search-generic, echo=FALSE, results='asis', tidy=TRUE>>=
\end_layout

\begin_layout Plain Layout

library(plyr)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# First 100 R-language Projects URL
\end_layout

\begin_layout Plain Layout

github.search <- "https://api.github.com/search/repositories?q=language:R&page=1&pe
r_page=100"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Generic Query URL Template
\end_layout

\begin_layout Plain Layout

github.template <- "https://api.github.com/search/repositories?q=language:%s&page=%
d&per_page=%d"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Generate URL from Parameters
\end_layout

\begin_layout Plain Layout

github.api.search <- function(language="R", page=1, per_page=100) {
\end_layout

\begin_layout Plain Layout

  sprintf(github.template, language, page, per_page)
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Function to execute query and return the page of results
\end_layout

\begin_layout Plain Layout

page.data <- function(query=github.api.search()) {
\end_layout

\begin_layout Plain Layout

  repos <- github.api(query, "application/vnd.github.preview")
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  repoRowMin <- function(repo) {   data.frame(repo$name, repo$owner$login,
 as.character(as.Date(repo$created_at, "%Y-%m-%d")), as.character(as.Date(repo$pushe
d_at, "%Y-%m-%d")), repo$watchers, repo$forks) }
\end_layout

\begin_layout Plain Layout

  
\end_layout

\begin_layout Plain Layout

  page <- do.call('rbind', lapply(1:length(repos$items), function(i) repoRowMin(r
epos$items[[i]])))
\end_layout

\begin_layout Plain Layout

  colnames(page) <- c("Name", "Owner", "Created", "Pushed", "Watchers",
 "Forks")
\end_layout

\begin_layout Plain Layout

  mutate(page, Collected = as.character(Sys.Date()))
\end_layout

\begin_layout Plain Layout

  page
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<page-r, echo=FALSE, results='asis'>>=
\end_layout

\begin_layout Plain Layout

library(xtable)
\end_layout

\begin_layout Plain Layout

page1.r <- page.data()
\end_layout

\begin_layout Plain Layout

print(xtable(head(page1.r), type="latex", digits=0, caption="Sample GitHub
 API search results showing top R repositories sorted by Watcher count"),
 include.rownames=FALSE, caption.placement="top")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<page-r-forked, echo=FALSE, results='asis'>>=
\end_layout

\begin_layout Plain Layout

page1.r <- arrange(page1.r, desc(Forks))
\end_layout

\begin_layout Plain Layout

print(xtable(head(page1.r), type="latex", digits=0, caption="Sample GitHub
 API search results showing top R repositories sorted by Fork count"), include.ro
wnames=FALSE, caption.placement="top")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<automated, echo=FALSE, tidy=TRUE>>=
\end_layout

\begin_layout Plain Layout

repos.r <- function(){
\end_layout

\begin_layout Plain Layout

  repos <- data.frame(Name=character(),
\end_layout

\begin_layout Plain Layout

                      Owner=character(),
\end_layout

\begin_layout Plain Layout

                      Created=character(),
\end_layout

\begin_layout Plain Layout

                      Pushed=character(),
\end_layout

\begin_layout Plain Layout

                      Watchers=integer(),
\end_layout

\begin_layout Plain Layout

                      Forks=integer(),
\end_layout

\begin_layout Plain Layout

                      Collected=character())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  repos <- rbind(repos, do.call('rbind', lapply(1:5, function(i){
\end_layout

\begin_layout Plain Layout

             page.data(github.api.search(page=i))
\end_layout

\begin_layout Plain Layout

           })))
\end_layout

\begin_layout Plain Layout

  Sys.sleep(60)
\end_layout

\begin_layout Plain Layout

  repos <- rbind(repos, do.call('rbind', lapply(6:10, function(i){
\end_layout

\begin_layout Plain Layout

             page.data(github.api.search(page=i))
\end_layout

\begin_layout Plain Layout

           })))
\end_layout

\begin_layout Plain Layout

  repos
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<settings, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

data.live <- TRUE
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<packages, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

library(plyr)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

parseName <- function(packageEntry) {   
\end_layout

\begin_layout Plain Layout

  start <- regexpr("index.html", packageEntry)   
\end_layout

\begin_layout Plain Layout

  end <- regexpr("</a", packageEntry)
\end_layout

\begin_layout Plain Layout

  substr(packageEntry, start+12, end-1) 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Read CRAN package directory
\end_layout

\begin_layout Plain Layout

cran.packages <- "http://cran.us.r-project.org/web/packages/available_packages_by_da
te.html"
\end_layout

\begin_layout Plain Layout

packageEntries <- readLines(cran.packages)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Web scrape package names and dates, convert to data frame
\end_layout

\begin_layout Plain Layout

tagSignature <- "<a href=
\backslash
"../../web/packages/"
\end_layout

\begin_layout Plain Layout

packageEntries <- packageEntries[grep(tagSignature, packageEntries)]
\end_layout

\begin_layout Plain Layout

dates <- substr(packageEntries, 11, 20)
\end_layout

\begin_layout Plain Layout

names <- sapply(1:length(packageEntries), function(i) parseName(packageEntries[i
]))
\end_layout

\begin_layout Plain Layout

cran <- data.frame(dates, names)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if (data.live) {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 # Read data from GitHub API
\end_layout

\begin_layout Plain Layout

  github <- repos.r()
\end_layout

\begin_layout Plain Layout

  write.csv(github, "../Data/repos.csv")
\end_layout

\begin_layout Plain Layout

  write.csv(cran, "../Data/repos.cran.csv")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

 # Read previously created data set hosted on GitHub
\end_layout

\begin_layout Plain Layout

  url.data <- "https://raw.githubusercontent.com/patricktoohey/GitHubR/master/Data/
/repos.csv"
\end_layout

\begin_layout Plain Layout

  github.history <- read.csv(text = getURL(url.data, ssl.verifypeer = FALSE,
 .opts=opts))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  github <- transform(github.history, Collected = as.Date(Collected, "%Y-%m-%d"))
\end_layout

\begin_layout Plain Layout

  github <- subset(github, Collected == as.Date("2014-03-01", "%Y-%m-%d"))
\end_layout

\begin_layout Plain Layout

  github <- transform(github, Collected = as.character(Collected))
\end_layout

\begin_layout Plain Layout

  github <- transform(github, Created = as.character(as.Date(Created, "%Y-%m-%d"))
)
\end_layout

\begin_layout Plain Layout

  github <- transform(github, Pushed = as.character(as.Date(Pushed, "%Y-%m-%d")))
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Filter data set
\end_layout

\begin_layout Plain Layout

github <- mutate(github, CRAN = cran$dates[match(Name, cran$names)])
\end_layout

\begin_layout Plain Layout

github.cran <- na.omit(github)
\end_layout

\begin_layout Plain Layout

write.csv(github.cran, "../Data/repos.cran.github.csv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Section
Visualizing the Metrics
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<metric-limits, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

label.threshold.forks.2013 <- 100
\end_layout

\begin_layout Plain Layout

label.threshold.watchers.2013 <- 500
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

display.threshold.forks.2013 <- 1500
\end_layout

\begin_layout Plain Layout

display.threshold.watchers.2013 <- 1500
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

label.threshold.forks <- 300
\end_layout

\begin_layout Plain Layout

label.threshold.watchers <- 500
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

display.threshold.forks <- 1500
\end_layout

\begin_layout Plain Layout

display.threshold.watchers <- 1500
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
An initial view of GitHub's R community was collected through the API in
 late 2013.
 At that time, the 
\emph on
ML_for_Hackers
\emph default
 project was a clear outlier, with common R packages (e.g., 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{ggplot2}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{knitr}
\end_layout

\end_inset

) holding less than half as many project forks.
 Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-R-Repository-Forks"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-R-Repository-Forks-2015"

\end_inset

 illustrate the growth in the utilization of project forks since that original
 dataset was collected.
 GitHub now contains eight projects with more than 300 forks, demonstrating
 increased involvement from the developer community.
\end_layout

\begin_layout Standard
Equivalent visualizations of the 
\emph on
Watcher
\emph default
 metric are provided in Figures 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-R-Repository-Watchers-1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:GitHub-R-Repository-Watchers"

\end_inset

, which show substantial growth for the labeled projects.
 Common R packages are represented in each sample, including 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{devtools}
\end_layout

\end_inset

, which is highlighted in both the 
\emph on
Watcher
\emph default
 and 
\emph on
Fork
\emph default
 visualizations.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{devtools}
\end_layout

\end_inset

 package is of particular interest as it facilitates direct integration
 of GitHub-hosted packages during R sessions.
 Accordingly, it is worthwhile illustrating the connection between GitHub
 and official Comprehensive R Archive Network (CRAN) packages.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<frequently-forked-2013, echo=FALSE, warning=FALSE, fig.height=3.5, message=FALSE
>>=
\end_layout

\begin_layout Plain Layout

library(plyr)
\end_layout

\begin_layout Plain Layout

library(ggplot2)
\end_layout

\begin_layout Plain Layout

library(grid) 
\end_layout

\begin_layout Plain Layout

library(reshape2)
\end_layout

\begin_layout Plain Layout

library(scales)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

github.history <- read.csv("../data/github.history.csv")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

github.history <- transform(github.history, Collected = as.Date(Collected,
 "%Y-%m-%d"))
\end_layout

\begin_layout Plain Layout

github.history.2013 <- subset(github.history, Collected == as.Date("2013-10-08",
 "%Y-%m-%d"))
\end_layout

\begin_layout Plain Layout

# Color time scale for GitHub History
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

github.packages <- subset(github.history.2013, Forks < display.threshold.forks.2013)
\end_layout

\begin_layout Plain Layout

github.forked <- subset(github.packages, Forks > label.threshold.forks.2013)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- ggplot(github.packages, aes(x=as.Date(Created), y=Forks))
\end_layout

\begin_layout Plain Layout

font <- "Helvetica"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build Plot
\end_layout

\begin_layout Plain Layout

r <- r + theme(plot.title=element_text(family=font), legend.position="none")
 
\end_layout

\begin_layout Plain Layout

r <- r + geom_point(alpha=0.5, color="#dc302e") + xlab("Creation Date")+
 xlim(as.Date("2008-01-01"), as.Date("2016-01-01"))
\end_layout

\begin_layout Plain Layout

r <- r + aes(size = Watchers)
\end_layout

\begin_layout Plain Layout

r <- r + scale_size(guide=guide_legend())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build labels
\end_layout

\begin_layout Plain Layout

label.name <- geom_text(aes(label=Name, hjust=0, vjust=0.3, family=font),
 data=github.forked, size=4.48, color="black")  
\end_layout

\begin_layout Plain Layout

label.owner <- geom_text(aes(label=Owner, hjust=0, vjust=2.2, family=font),
 data=github.forked, size=2.8, color="black")  
\end_layout

\begin_layout Plain Layout

label.watched <- geom_text(aes(label=sprintf("%i Watching", Watchers), hjust=0,
 vjust=3.5, family=font), data=github.forked, size=2.8, color="black") 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Render
\end_layout

\begin_layout Plain Layout

r + label.name + label.owner + label.watched
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/repos_forked.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample collected 2013-10-08.
 GitHub R Repository Forks by Creation Date: point size indicates number
 of Watchers.
 Top projects are labeled and include Watcher count.
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-R-Repository-Forks"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<frequently-forked, echo=FALSE, warning=FALSE, fig.height=3.5, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

github.packages <- subset(github, Forks < display.threshold.forks)
\end_layout

\begin_layout Plain Layout

github.forked <- subset(github.packages, Forks > label.threshold.forks & Watchers
 > 300)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- ggplot(github.packages, aes(x=as.Date(Created), y=Forks))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build Plot
\end_layout

\begin_layout Plain Layout

r <- r + theme(plot.title=element_text(family=font), legend.position="none")
 
\end_layout

\begin_layout Plain Layout

r <- r + geom_point(alpha=0.5, color="#dc302e") + xlab("Creation Date") +
 xlim(as.Date("2008-01-01"), as.Date("2016-01-01"))
\end_layout

\begin_layout Plain Layout

r <- r + aes(size = Watchers)
\end_layout

\begin_layout Plain Layout

r <- r + scale_size(guide=guide_legend())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build labels
\end_layout

\begin_layout Plain Layout

label.name <- geom_text(aes(label=Name, hjust=0, vjust=0.3, family=font),
 data=github.forked, size=4.48, color="black")  
\end_layout

\begin_layout Plain Layout

label.owner <- geom_text(aes(label=Owner, hjust=0, vjust=2.2, family=font),
 data=github.forked, size=2.8, color="black")  
\end_layout

\begin_layout Plain Layout

label.watched <- geom_text(aes(label=sprintf("%i Watching", Watchers), hjust=0,
 vjust=3.5, family=font), data=github.forked, size=2.8, color="black") 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Render
\end_layout

\begin_layout Plain Layout

r + label.name + label.owner + label.watched
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/repos_forked.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample collected 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format(Sys.time(), "%Y-%m-%d")}
\end_layout

\end_inset

.
 GitHub R Repository Forks by Creation Date.
 Outliers with more than 3000 forks are omitted.
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-R-Repository-Forks-2015"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<frequently-watched-2013, echo=FALSE, warning=FALSE, fig.height=3.5, message=FALS
E>>=
\end_layout

\begin_layout Plain Layout

# Label filter
\end_layout

\begin_layout Plain Layout

github.watched <- subset(github.history.2013, Watchers > 400)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- ggplot(github.history.2013, aes(x=as.Date(Created), y=Watchers)) 
\end_layout

\begin_layout Plain Layout

r <- r + theme(legend.position="none", plot.title=element_text(family=font))
 
\end_layout

\begin_layout Plain Layout

r <- r + geom_point(alpha=0.5, color="#384f7a") + aes(size = Forks)
\end_layout

\begin_layout Plain Layout

r <- r + xlim(as.Date("2008-01-01"), as.Date("2016-01-01")) + xlab("Creation
 Date") + ylab("Watchers")
\end_layout

\begin_layout Plain Layout

r <- r + scale_size(guide=guide_legend())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build Labels
\end_layout

\begin_layout Plain Layout

labels <- geom_text(aes(label=Name, hjust=0, vjust=0.3, family=font), data=github.
watched, size=4.48, color="black")  
\end_layout

\begin_layout Plain Layout

owners <- geom_text(aes(label=Owner, hjust=0, vjust=2.2, family=font), data=githu
b.watched, size=2.8, color="black")  
\end_layout

\begin_layout Plain Layout

label.forks <- geom_text(aes(label=sprintf("%i Forks", Forks), hjust=0, vjust=3.5,
 family=font), data=github.watched, size=2.8, color="black")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

highlights <- c("ggplot2", "knitr", "ML_for_Hackers", "r_recommendation_system")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Render
\end_layout

\begin_layout Plain Layout

r + labels + owners + label.forks
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/repos_watched.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample collected 2013-10-08.
 GitHub R Repository Watchers by Creation Date: point size indicates number
 of Forks.
 Top projects are labeled and include Fork count.
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-R-Repository-Watchers-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<frequently-watched, echo=FALSE, warning=FALSE, fig.height=3.5, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

# Label filter
\end_layout

\begin_layout Plain Layout

github.watched <- subset(github, Watchers > label.threshold.watchers & Forks
 > 200)
\end_layout

\begin_layout Plain Layout

github.watched <- subset(github.watched, Name != "swirl_courses")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- ggplot(github, aes(x=as.Date(Created), y=Watchers)) 
\end_layout

\begin_layout Plain Layout

r <- r + theme(legend.position="none", plot.title=element_text(family=font))
 
\end_layout

\begin_layout Plain Layout

r <- r + geom_point(alpha=0.5, color="#384f7a") + aes(size = Forks)
\end_layout

\begin_layout Plain Layout

r <- r + xlim(as.Date("2008-01-01"), as.Date("2016-01-01")) + xlab("Creation
 Date") + ylim(0, display.threshold.watchers) + ylab("Watchers")
\end_layout

\begin_layout Plain Layout

r <- r + scale_size(guide=guide_legend())
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Build Labels
\end_layout

\begin_layout Plain Layout

labels <- geom_text(aes(label=Name, hjust=0, vjust=0.3, family=font), data=github.
watched, size=4.48, color="black")  
\end_layout

\begin_layout Plain Layout

owners <- geom_text(aes(label=Owner, hjust=0, vjust=2.2, family=font), data=githu
b.watched, size=2.8, color="black")  
\end_layout

\begin_layout Plain Layout

label.forks <- geom_text(aes(label=sprintf("%i Forks", Forks), hjust=0, vjust=3.5,
 family=font), data=github.watched, size=2.8, color="black") 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

# Render
\end_layout

\begin_layout Plain Layout

r + labels + owners + label.forks
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/repos_watched.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample collected 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
Sexpr{format(Sys.time(), "%Y-%m-%d")}
\end_layout

\end_inset

.
 GitHub R Repository Watchers by Creation Date: point size indicates number
 of Forks.
 Top projects are labeled and include Fork count.
 Outliers with more than 1500 watchers are omitted.
\begin_inset CommandInset label
LatexCommand label
name "fig:GitHub-R-Repository-Watchers"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
CRAN Subset
\end_layout

\begin_layout Standard
As demonstrated previously, GitHub hosts the code for a number commonly
 used R packages that are also available through CRAN.
 Given the results retrieved from the GitHub API, a cross reference to the
 CRAN package webpage can be used to produce a list of CRAN packages hosted
 on GitHub.
 The resulting data set in Table 3 reports some of the more commonly used
 CRAN packages that are maintained in GitHub (e.g., 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{ggplot2}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{shiny}
\end_layout

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cran-table, echo=FALSE, results='asis'>>=
\end_layout

\begin_layout Plain Layout

print(xtable(head(github.cran, 5), type="latex", digits=0, caption="Sample
 of GitHub CRAN Packages"), include.rownames=FALSE, caption.placement="top")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Having established a method for identifying CRAN packages in a GitHub search,
 the process can also be used to identify the owners of the CRAN packages.
 With this list, we were able to identify GitHub repositories authored by
 previous CRAN developers.
 The repositories shown in Table 4 may be of interest to developers wishing
 to join an ongoing project with more senior developers.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<cran-future, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

cran.authors <- unique(github.cran$Owner)
\end_layout

\begin_layout Plain Layout

future.cran <- subset(github, is.na(CRAN) & Owner %in% cran.authors)
\end_layout

\begin_layout Plain Layout

future.cran <- arrange(future.cran, desc(as.Date(Created)))
\end_layout

\begin_layout Plain Layout

future.cran <- subset(future.cran, select = -c(CRAN))
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<table-cran-future, echo=FALSE, results='asis'>>=
\end_layout

\begin_layout Plain Layout

write.csv(future.cran, "../Data/future_cran.csv")
\end_layout

\begin_layout Plain Layout

print(xtable(head(future.cran, n=10L), type="latex", digits=0, caption="Sample
 CRAN Author Activity"), include.rownames=FALSE, caption.placement="top")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Visualizing the CRAN Subset
\end_layout

\begin_layout Standard
Given the collection of identified CRAN packages, the previous
\emph on
 Watchers
\emph default
 visualization has been transformed to better highlight the CRAN packages
 found in the data set.
 The results are shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Project-watchers-CRAN"

\end_inset

.
 As before, each mark represents the date the project was created, however,
 for contextual purposes, the time axis has been modified to indicate the
 latest R version available when the project was created.
 Additionally, the number of project watchers reported by the GitHub API
 is visualized on a log scale to better illustrate the distribution of CRAN
 packages and their respective popularity.
 This visualization suggests growth in the utilization of the R language,
 as well as the increasing popularity of GitHub as a source code repository
 within the community.
\end_layout

\begin_layout Standard
The visible increase in GitHub activity occurring following the release
 of R version 2.11 in April of 2010 is likely related to the development
 of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{devtools}
\end_layout

\end_inset

; the creation of which is highlighted in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Project-watchers-CRAN"

\end_inset

.
 The introduction of a utility like 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{devtools}
\end_layout

\end_inset

, which affords sharing of GitHub hosted packages, would likely benefit
 CRAN developers as much as those developing independently.
 The frequency distribution shown in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Project-watchers-CRAN-1"

\end_inset

 illustrates accelerated gains in both contexts, demonstrating growth throughout
 the community.
 The 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{devtools}
\end_layout

\end_inset

 package simplifies the utilization of GitHub repositories, so it is no
 surprise that it would be aligned with increased development within that
 environment.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

<<R-releases, echo=FALSE>>=
\end_layout

\begin_layout Plain Layout

date.release <- as.Date(c("2007-11-26", "2008-04-22", "2008-10-20", "2009-04-17",
 "2009-10-26", "2010-04-22", "2010-10-16", "2010-12-16", "2011-07-08", "2011-12-
23", "2013-04-03", "2014-04-11", "2015-04-17"))
\end_layout

\begin_layout Plain Layout

version.release <- c("2.6.1", "2.7.0", "2.8.0", "2.9.0", "2.10.0", "2.11.0", "2.12.0",
 "2.13.0", "2.14.0", "2.15.0", "3.0.0", "3.1.0", "3.2.0")
\end_layout

\begin_layout Plain Layout

r.releases <- data.frame(date.release, version.release)
\end_layout

\begin_layout Plain Layout

write.csv(r.releases, "../Data/r_versions.csv")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<watched-cran, echo=FALSE, message=FALSE, fig.height=6>>=
\end_layout

\begin_layout Plain Layout

github.cran <- transform(github, Package = ifelse(is.na(CRAN), "Other", "CRAN"))
\end_layout

\begin_layout Plain Layout

github.cran <- transform(github.cran, YearCreated = format(as.Date(Created,
 "%Y-%m-%d"), "%Y"))
\end_layout

\begin_layout Plain Layout

crans <- ggplot(github.cran, aes(x=as.Date(Created), y=log1p(Watchers), position="
jitter"))
\end_layout

\begin_layout Plain Layout

crans <- crans + theme(panel.grid.minor=element_blank(), panel.grid.major=element_li
ne(size=0.1)) + xlab("Project Creation Date Relative to R Versions") + ylab("log(
Watchers+1)")
\end_layout

\begin_layout Plain Layout

crans <- crans + theme(panel.grid.minor=element_blank(), panel.grid.major=element_li
ne(size=0.1))
\end_layout

\begin_layout Plain Layout

crans <- crans + geom_point(aes(color=Package), alpha=0.8) + scale_colour_manual(
values=c("#dc302e", "#384f7a"))
\end_layout

\begin_layout Plain Layout

crans <- crans + scale_x_date(breaks=date.release, labels=version.release)
 + theme(axis.text.x=element_text(size=7, angle=60, hjust=1))
\end_layout

\begin_layout Plain Layout

crans <- crans + scale_y_continuous(breaks=c(0, log(10), log(100)), labels=c("1"
, "10", "100"))
\end_layout

\begin_layout Plain Layout

crans <- crans + geom_text(aes(label=Name, hjust=-0.2, vjust=0.3, family=font),
 data=subset(github.cran, Name=="devtools"), size=4.48, color="black")
\end_layout

\begin_layout Plain Layout

crans <- crans + geom_text(aes(label=Created, hjust=-0.2, vjust=2.2, family=font),
 data=subset(github.cran, Name=="devtools"), size=2.8, color="black")  
\end_layout

\begin_layout Plain Layout

crans
\end_layout

\begin_layout Plain Layout

write.csv(github.cran, "../Data/github_cran.csv")
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/cran_repos.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Project watchers with point color used to distinguish CRAN packages.
 Creation date of associated project represented by the official R version
 at the time of creation.
\begin_inset CommandInset label
LatexCommand label
name "fig:Project-watchers-CRAN"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<watched-cran-frequency, echo=FALSE, message=FALSE, fig.height=3.5>>=
\end_layout

\begin_layout Plain Layout

github.cran <- transform(github, Package = ifelse(is.na(CRAN), "Other", "CRAN"))
\end_layout

\begin_layout Plain Layout

github.cran <- transform(github.cran, YearCreated = format(as.Date(Created,
 "%Y-%m-%d"), "%Y"))
\end_layout

\begin_layout Plain Layout

cran.freq <- ggplot(github.cran) + geom_bar(aes(x=YearCreated, fill=Package),
 position="dodge", alpha=0.9)
\end_layout

\begin_layout Plain Layout

cran.freq <- cran.freq + scale_fill_manual(values=c("#dc302e", "#384f7a"))
\end_layout

\begin_layout Plain Layout

cran.freq
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ggsave("../Figures/cran_freq.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Frequency distribution of R projects on GitHub by year, distinguished as
 either CRAN or other.
\begin_inset CommandInset label
LatexCommand label
name "fig:Project-watchers-CRAN-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Project Activity
\end_layout

\begin_layout Standard
As noted by 
\begin_inset CommandInset citation
LatexCommand citet
key "Dabbish:2012:SCG:2145204.2145396"

\end_inset

 and 
\begin_inset CommandInset citation
LatexCommand citet
key "McDonald:2013:PPO:2468356.2468382"

\end_inset

, developers view a project's level of activity to be a key indicator of
 its value.
 Often, repositories are created on GitHub, but then incur little or no
 ongoing activity.
 
\end_layout

\begin_layout Standard
The plot in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:R-Repository-Activity"

\end_inset

 shows the level of activity for the R projects in GitHub.
 The activity level is defined here as the time between the repository's
 last update and its creation date.
 The visualization includes a guide line indicating the optimal activity
 level for a given repository creation date, which is shown on the x-axis.
 Note, however, that the indicated project length simply represents recent
 activity, not necessarily distributed activity throughout the life of the
 project.
 Regardless, repositories located along the x-axis are those which were
 added to GitHub, but have since seen no additional development effort.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<long-projects, echo=FALSE, fig.height=4, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

r <- ggplot(github) + geom_point(alpha=0.5, color="#384f7a") + theme(legend.positi
on="none")
\end_layout

\begin_layout Plain Layout

r <- r + aes(x=as.Date(Created), y=as.integer(as.Date(Pushed))-as.integer(as.Date(Cre
ated)))
\end_layout

\begin_layout Plain Layout

r <- r + geom_line(aes(y=as.integer(as.Date("2015-08-18", "%Y-%m-%d"))-as.integer(a
s.Date(Created))), colour="blue", alpha=0.5)
\end_layout

\begin_layout Plain Layout

 
\end_layout

\begin_layout Plain Layout

r + xlab("Creation Date") + ylab("Project Duration (days)")
\end_layout

\begin_layout Plain Layout

narrow <- element_text(family=font)
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/r_activity.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
R Repository Activity
\begin_inset CommandInset label
LatexCommand label
name "fig:R-Repository-Activity"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The data points in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:R-Repository-Activity"

\end_inset

 are displayed with lowered opacity, making evident, through the dense areas,
 that many projects are created and not maintained, while others remain
 quite active for longer periods of time; 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{knitr}
\end_layout

\end_inset

 and 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{ggplot2}
\end_layout

\end_inset

 are two such examples.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:R-Repository-Social-Activity"

\end_inset

 illuminates this point by removing all but those projects with more than
 10 forks.
 Additionally, this figure helps identify the short-lived projects with
 high impact in the community, including tutorials (twitter-sentiment-analysis-t
utorial-201107) and developer competitions (r_recommendation_system).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

<<long-popular-projects, echo=FALSE, fig.height=4, message=FALSE>>=
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

highlights <- c("ggplot2", "knitr", "ML_for_Hackers", "r_recommendation_system")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

github.activity <- subset(github, Forks > 10)
\end_layout

\begin_layout Plain Layout

r <- ggplot(github.activity)
\end_layout

\begin_layout Plain Layout

r <- r + geom_point(data=subset(github, Name %in% highlights), color="white",
 aes(size=(Forks/max(Forks))*1.05, x=as.Date(Created), y=as.integer(as.Date(Pushed))
-as.integer(as.Date(Created))))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- r + geom_point(color="#384f7a", alpha=0.5) + theme(legend.position="none")
\end_layout

\begin_layout Plain Layout

r <- r + aes(size=Forks/max(Forks), x=as.Date(Created), y=as.integer(as.Date(Pushed
))-as.integer(as.Date(Created)))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r <- r + geom_text(aes(label=Name, hjust=-0.2, vjust=0.3, family=font), data=subse
t(github.activity, Name=="ggplot2"), size=4, color="black")  
\end_layout

\begin_layout Plain Layout

r <- r + geom_text(aes(label=Name, hjust=-0.2, vjust=0.3, family=font), data=subse
t(github.activity, Name=="knitr"), size=4, color="black")  
\end_layout

\begin_layout Plain Layout

r <- r + geom_text(aes(label=Name, hjust=1.05, vjust=0.3, family=font), data=subse
t(github.activity, Name=="r_recommendation_system"), size=4, color="black")
\end_layout

\begin_layout Plain Layout

r <- r + geom_text(aes(label=Name, hjust=1.05, vjust=0.3, family=font), data=subse
t(github.activity, Name=="ML_for_Hackers"), size=4, color="black")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

r + xlab("Creation Date") + ylab("Project Duration (days)")
\end_layout

\begin_layout Plain Layout

narrow <- element_text(family=font)
\end_layout

\begin_layout Plain Layout

ggsave("../Figures/r_activity.svg")
\end_layout

\begin_layout Plain Layout

@
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
R Repository Activity, with point size demonstrating relative fork count.
\begin_inset CommandInset label
LatexCommand label
name "fig:R-Repository-Social-Activity"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Summary and Future Research
\end_layout

\begin_layout Standard
Package and tool developers are leading the R community's continued adoption
 of traditional software engineering practices like version control, unit
 testing, build automation, and continuous integration; with version control
 providing the foundation for the later development stages.
 These tools offer a closed loop, allowing a build automation system to
 detect changes to the underlying code, which can then trigger automated
 testing of new code.
 The GitHub community enhances this infrastructure by connecting developers
 and facilitating collaboration.
 Developers - like those performing reproducible research - utilize and
 benefit from the packages and tools provided by GitHub's R community.
 They realize the benefits of these methods, as is evident by the growth
 in the R community on GitHub.
\end_layout

\begin_layout Standard
Future research analyzing the 2nd tier repositories (those below the thresholds
 controlling the annotations of our plots), may demonstrate the true diversity
 of the community.
 Identifying and cataloging the domains in which these repositories lie
 would help other developers and researchers take full advantage of this
 work.
 Promotion of the associated projects will help ensure that developers continue
 to contribute to the growth of the community.
 Identification of the domains present within the GitHub R space could be
 achieved by scanning the associated R source code.
 Libraries utilized in these projects may provide an indication of the associate
d domain.
\end_layout

\begin_layout Standard
Continuous monitoring of the key performance metrics of the community will
 help demonstrate the continued adoption of R as a tool for these various
 domains.
 The metrics shown change on a regular basis as new projects appear and
 grow in influence.
 In addition to the monitoring of projects, as we have demonstrated here,
 GitHub provides facilities to follow the key developers within the R landscape
 and provides us with an opportunity to examine the continued growth and
 development of this community.
\end_layout

\begin_layout Standard
Talk about GitHub historian services that actively monitor trends in language
 utilization.
\end_layout

\begin_layout Section
Acknowledgments
\end_layout

\begin_layout Standard
This article was produced using LyX version 2.0.6 and the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pkg{knitr}
\end_layout

\end_inset

 package as demonstrated in 
\begin_inset CommandInset citation
LatexCommand citet
key "Xie:2013"

\end_inset

, with the 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
strong{RJournal.lyx}
\end_layout

\end_inset

 template provided by Yihui Xie.
 The associated LyX source document - used to produce this article - is
 available on GitHub: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

https://github.com/patricktoohey/GitHubR/tree/master/Article
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
When you insert a BibTeX bibliography here, do not use any bib styles.
 The R Journal has declared the style to be 
\begin_inset Quotes eld
\end_inset

abbrvnat
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "toohey-taylor"
options "plainnat"

\end_inset


\end_layout

\begin_layout Address
Patrick Toohey
\begin_inset Newline newline
\end_inset

Human-Computer Interaction Program
\begin_inset Newline newline
\end_inset

SUNY Oswego
\begin_inset Newline newline
\end_inset

USA
\begin_inset Newline newline
\end_inset


\begin_inset Flex Email
status open

\begin_layout Plain Layout
ptoohey@oswego.edu
\end_layout

\end_inset


\end_layout

\begin_layout Address
Roger S.
 Taylor
\begin_inset Newline newline
\end_inset

Department of Psychology
\begin_inset Newline newline
\end_inset

SUNY Oswego
\begin_inset Newline newline
\end_inset

USA
\begin_inset Newline newline
\end_inset


\begin_inset Flex Email
status open

\begin_layout Plain Layout
roger.taylor@oswego.edu
\end_layout

\end_inset


\end_layout

\end_body
\end_document
